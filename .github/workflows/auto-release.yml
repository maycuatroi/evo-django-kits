name: Auto Release to PyPI

on:
  push:
    branches: [main]

jobs:
  auto-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine bumpversion

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Bump version
        run: |
          # Get all commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --format=%B)
          else
            COMMITS=$(git log "${LAST_TAG}..HEAD" --format=%B)
          fi

          # Determine version bump type based on conventional commits
          BUMP_TYPE="patch"  # default to patch

          echo "Analyzing commits for version bump type..."
          while IFS= read -r commit || [ -n "$commit" ]; do
            if echo "$commit" | grep -qE "BREAKING CHANGE|^BREAKING CHANGE"; then
              echo "Found breaking change: $commit"
              BUMP_TYPE="major"
              break
            elif echo "$commit" | grep -qE "^feat(\([[:alnum:]_-]+\))?:"; then
              echo "Found feature: $commit"
              BUMP_TYPE="minor"
            fi
          done <<< "$COMMITS"

          echo "Bumping $BUMP_TYPE version..."
          bumpversion --allow-dirty "$BUMP_TYPE"

          # Extract the new version
          NEW_VERSION=$(cat evo_django_kits/VERSION)
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Build package
        run: |
          python setup.py sdist bdist_wheel

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          twine upload dist/*

      - name: Create GitHub Release
        run: |
          # Generate changelog using conventional commits
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --format="* %s" --no-merges)
          else
            COMMITS=$(git log "${LAST_TAG}..HEAD" --format="* %s" --no-merges)
          fi

          {
            echo "## Changes"
            echo
            echo "### Breaking Changes"
            echo "$COMMITS" | grep -i "BREAKING CHANGE" || true
            echo
            echo "### Features"
            echo "$COMMITS" | grep -i "^* feat" || true
            echo
            echo "### Bug Fixes"
            echo "$COMMITS" | grep -i "^* fix" || true
            echo
            echo "### Other Changes"
            echo "$COMMITS" | grep -iv "^* feat\|^* fix\|BREAKING CHANGE" || true
          } > release_notes.md

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.NEW_VERSION }}
          name: Release v${{ env.NEW_VERSION }}
          body_path: release_notes.md
          generate_release_notes: true

      - name: Push version update
        run: |
          git push --follow-tags
